{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["applyStyleToRange","callWithJQuery","dataTableToXlsx","writeXlsxFile","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","xlsx","ws","range","style","C","R","cell","cell_address","cell_ref","ref","ref1","results","s","r","e","push","n","ref2","ref3","results1","c","utils","encode_cell","extend","t","v","table","pivotData","opts","colAttrs","colKeys","cols","headerColsLen","headerRowsLen","k","len1","len2","m","rowAttrs","rowKeys","style2","style_body","style_total_col","style_total_row","table_to_sheet","cellStyles","getRowKeys","getColKeys","fill","type","pattern","fgColor","rgb","font","sz","alignment","wrapText","border","top","color","bottom","bold","left","right","$","pivotUtilities","getTranslation","dataTrans","wch","Math","max","wb","book_new","book_append_sheet","writeFile","PivotData","_getValueTranslation","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","getValueTranslation","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","pivotTableRendererXlsx","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","value","format","countUnique","arg","attr","uniq","record","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","pvtData","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","and","b_true","b_false","no_data","rendererTrans","aggregatorTrans","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","isArray","map","key","k_name","input","sortKeys","arrSort","aggregator","aggregatorName","rows","valAttrs","vals","tree","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","tblCols","isEmptyObject","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","fromCharCode","agg","spanSize","td","th","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","tableHolder","xlsBtn","exportXlsx","append","css","pivot","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","pivotUI","inputOpts","overwrite","locale","aggrTrans","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","lang","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","c_name","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","keys","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","prepend","inArray","rendererName","attr_name","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","subopts","u","unusedAttrsContainer","remove","not","excludedItems","ref7","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorGen","heatmapper","numCols","numRows","hexGen","hex","intensity","round","toString","colorFor","forEachCell","values","elem","barcharter","wrapper","height","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\napplyStyleToRange = (xlsx, ws, range, style) ->\n  for R in [range.s.r..range.e.r]\n    for C in [range.s.c..range.e.c]\n        cell_address = {c:C, r:R}\n        #/* if an A1-style address is needed, encode the address */\n        cell_ref = xlsx.utils.encode_cell(cell_address)\n        cell = ws[cell_ref]\n        if cell\n            cell.s = if cell.s then jQuery.extend(true, jQuery.extend(true, {}, cell.s), style) else style\n            if cell.t == 'z'\n                cell.t = 's'\n        else\n            ws[cell_ref] = {s:style, v:'', t:'s'}\n\ndataTableToXlsx = (xlsx, table, pivotData, opts) ->\n    ws = xlsx.utils.table_to_sheet(table, {cellStyles: true})\n    colAttrs = pivotData.colAttrs\n    rowAttrs = pivotData.rowAttrs\n    rowKeys = pivotData.getRowKeys()\n    colKeys = pivotData.getColKeys()\n\n    #style1 = {\n    #    fill: {\n    #        type:'pattern',\n    #        pattern: \"solid\",\n    #        fgColor: { rgb: \"3465a4\" }\n    #    },\n    #    border: {\n    #        top: { style: 'thin', color: '000000'}\n    #    },\n    #    font: {\n    #        color: { rgb: 'ffffff'},\n    #        sz: 11\n    #    }\n    #}\n\n    style2 = {\n        fill: {\n            type:'pattern',\n            pattern: \"solid\",\n            fgColor: { rgb: \"dddddd\" }\n        },\n        font: {\n            sz: 11\n        },\n        alignment: {\n            wrapText: true\n        }\n    }\n    style_body = {\n        fill: {\n            type:'pattern',\n            pattern: \"solid\",\n            fgColor: { rgb: \"ffffff\" }\n        },\n        font: {\n            sz: 11\n        }\n    }\n    style_total_row = {\n        border: {\n            top: { style: 'thin', color: '000000'},\n            bottom: { style: 'thin', color: '000000'}\n        },\n        font: {\n            sz: 11,\n            bold: true\n        }\n    }\n    style_total_col = {\n        border: {\n            left: { style: 'thin', color: '000000'},\n            right: { style: 'thin', color: '000000'}\n        },\n        font: {\n            sz: 11,\n            bold: true\n        }\n    }\n\n    #  cols_len = dataArr[0].length;\n    #  rows_len = dataArr.length+title_rows_len-1;\n\n    headerRowsLen = colAttrs.length + if rowAttrs.length > 0 then 1 else 0\n    headerColsLen = rowAttrs.length + if colAttrs.length > 0 then 1 else 0\n    #cols header\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: 0}, e: {r: colAttrs.length, c: headerColsLen+colKeys.length}}, style2)\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: 0}, e: {r: 0, c: headerColsLen+colKeys.length}}, {border: {top: { style: 'thin', color: '000000'}}})\n    applyStyleToRange(xlsx, ws, { s: {r: colAttrs.length, c: 0}, e: {r: colAttrs.length, c: headerColsLen+colKeys.length}}, {border: {bottom: { style: 'thin', color: '000000'}}})\n    #rows header\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: 0}, e: {r: headerRowsLen+rowKeys.length, c: rowAttrs.length}}, style2)\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: 0}, e: {r: headerRowsLen+rowKeys.length, c: 0}}, {border: {left: { style: 'thin', color: '000000'}}})\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: rowAttrs.length}, e: {r: headerRowsLen+rowKeys.length, c: rowAttrs.length}}, {border: {right: { style: 'thin', color: '000000'}}})\n\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: 0}, e: {r: colAttrs.length, c: rowAttrs.length}}, {font: {sz: 11, bold: true}})\n    #body\n    applyStyleToRange(xlsx, ws, { s: {r: colAttrs.length+1, c: rowAttrs.length+1}, e: {r: headerRowsLen+rowKeys.length, c: headerColsLen+colKeys.length}}, style_body);\n    #totals\n    applyStyleToRange(xlsx, ws, { s: {r: headerRowsLen+rowKeys.length, c: 0}, e: {r: headerRowsLen+rowKeys.length, c: headerColsLen+colKeys.length}}, style_total_row)\n    applyStyleToRange(xlsx, ws, { s: {r: 0, c: headerColsLen+colKeys.length}, e: {r: headerRowsLen+rowKeys.length, c: headerColsLen+colKeys.length}}, style_total_col)\n\n    cols = []\n    for k in rowAttrs\n        t = $.pivotUtilities.getTranslation(k, opts.dataTrans)\n        cols.push({wch: t.length})\n    m = 0\n    for k in colAttrs\n        t = $.pivotUtilities.getTranslation(k, opts.dataTrans)\n        m = Math.max(m, t.length)\n    if (colAttrs.length > 0)\n        cols.push({wch: m})\n    ws['!cols'] = cols;\n\n    return ws\n\nwriteXlsxFile = (xlsx, table, pivotData, opts) ->\n    wb = xlsx.utils.book_new()\n    ws = dataTableToXlsx(xlsx, table, pivotData, opts)\n#    ws = xlsx.utils.table_to_sheet(table)\n    xlsx.utils.book_append_sheet(wb, ws, 'Sheet1')\n    xlsx.writeFile(wb, 'pivot.xlsx', {cellStyles:true})\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (pvtData, opts) ->   pivotTableRendererXlsx(pvtData, opts)\n        \"Table Barchart\": (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).barchart()\n        \"Heatmap\":        (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap()\n        \"Row Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\")\n        \"Col Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\")\n\n    locales =\n        en:\n#            aggregators: aggregators\n#            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n                and: \"and\" #for gchart renderer\n                b_true: \"TRUE\"\n                b_false: \"FALSE\"\n                no_data: \"No data\"\n            rendererTrans:\n                \"Table\":          \"Table\"\n                \"Table Barchart\": \"Table Barchart\"\n                \"Heatmap\":        \"Heatmap\"\n                \"Row Heatmap\":    \"Row Heatmap\"\n                \"Col Heatmap\":    \"Col Heatmap\"\n            aggregatorTrans:\n                \"Count\":                \"Count\"\n                \"Count Unique Values\":  \"Count Unique Values\"\n                \"List Unique Values\":   \"List Unique Values\"\n                \"Sum\":                  \"Sum\"\n                \"Integer Sum\":          \"Integer Sum\"\n                \"Average\":              \"Average\"\n                \"Minimum\":              \"Minimum\"\n                \"Maximum\":              \"Maximum\"\n                \"Sum over Sum\":         \"Sum over Sum\"\n                \"80% Upper Bound\":      \"80% Upper Bound\"\n                \"80% Lower Bound\":      \"80% Lower Bound\"\n                \"Sum as Fraction of Total\":     \"Sum as Fraction of Total\"\n                \"Sum as Fraction of Rows\":      \"Sum as Fraction of Rows\"\n                \"Sum as Fraction of Columns\":   \"Sum as Fraction of Columns\"\n                \"Count as Fraction of Total\":   \"Count as Fraction of Total\"\n                \"Count as Fraction of Rows\":    \"Count as Fraction of Rows\"\n                \"Count as Fraction of Columns\": \"Count as Fraction of Columns\"\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort\n        else\n            return naturalSort\n\n    getTranslation = (data, dataTrans) ->\n        if !dataTrans?\n            return data\n        else\n            return if $.isArray(data)\n                data.map (key)-> if dataTrans[key] then dataTrans[key] else key\n            else if dataTrans[data] then dataTrans[data] else data\n\n    _getValueTranslation = (k, dataTrans) ->\n        return k if !dataTrans?\n        if k==true || k=='true'\n            k_name = dataTrans.b_true\n        else if k==false || k=='false'\n            k_name = dataTrans.b_false\n        else if k==''\n            k_name = dataTrans.no_data\n        else\n            k_name = k\n        return k_name\n\n    getValueTranslation = (data, dataTrans) ->\n        if !dataTrans?\n            return data\n        else\n            return if $.isArray(data) then data.map (key)-> _getValueTranslation(key, dataTrans) else _getValueTranslation(data, dataTrans)\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData, getTranslation, getValueTranslation}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            #th.textContent = c\n            th.textContent = $.pivotUtilities.getTranslation(c, opts.dataTrans)\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = $.pivotUtilities.getValueTranslation(colKey[j], opts.localeStrings)\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            result.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                #th.textContent = r\n                th.textContent = $.pivotUtilities.getTranslation(r, opts.dataTrans)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            result.appendChild tr\n\n        #now the actual data rows, with their row headers and totals\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = $.pivotUtilities.getValueTranslation(txt, opts.localeStrings)\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            result.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        result.appendChild tr\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    pivotTableRendererXlsx = (pivotData, opts) ->\n        result = pivotTableRenderer(pivotData, opts)\n        if opts && opts.xlsx && pivotData.rowAttrs.length + pivotData.colAttrs.length > 0\n            defaults =\n                localeStrings:\n                    exportXlsx: \"Export as XLSX\"\n            opts = $.extend defaults, opts\n            tableHolder = result\n            xlsBtn = $(\"<a class=\\\"btn btn-sm btn-default\\\">#{opts.localeStrings.exportXlsx}</a>\")\n            result = $(\"<div>\").append($(\"<div>\").append(xlsBtn).css('margin-bottom', '5px')).append(tableHolder)\n            xlsBtn.bind \"click\", ->\n                writeXlsxFile(opts.xlsx, tableHolder, pivotData, opts)\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: ->\n            derivedAttributes: {},\n            renderer: pivotTableRendererXlsx\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n        result = null\n        try\n            pivotData = new PivotData(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            lang: locale\n            derivedAttributes: {}\n            aggregators: aggregators\n            renderers: renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings, lang: locale\n            onRefresh: null\n            filter: -> true\n            sorters: ->\n            localeStrings: locales[locale].localeStrings\n#            rendererTrans: locales[locale].rendererTrans\n#            aggregatorTrans: locales[locale].aggregatorTrans\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n        try\n            if opts.dataTrans?\n                opts.rendererOptions.dataTrans = opts.dataTrans\n                delete opts.dataTrans\n            if opts.xlsx?\n                opts.rendererOptions.xlsx = opts.xlsx\n                delete opts.xlsx\n\n#            console.log('pivotUI',opts)\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n            rendererTrans = locales[locale].rendererTrans\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(rendererTrans[x]).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    #if own dataTrans of otps\n                    c_name = $.pivotUtilities.getTranslation(c, opts.rendererOptions.dataTrans)\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c_name} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n\n                             filterItem.append $(\"<span>\").text $.pivotUtilities.getValueTranslation(k,opts.localeStrings)\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c_name).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n            aggrTrans = locales[locale].aggregatorTrans\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(aggrTrans[x])\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            attr_name = $.pivotUtilities.getTranslation(attr, opts.rendererOptions.dataTrans)\n                            newDropdown.append($(\"<option>\").val(attr).text(attr_name))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\") ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        colorGen = (color, min, max) ->\n            hexGen = switch color\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\n\n            return (x) ->\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\n                hex = intensity.toString(16).split(\".\")[0]\n                hex = 0+hex if hex.length == 1\n                return hexGen(hex)\n\n        heatmapper = (scope, color) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\n\n        switch scope\n            when \"heatmap\"\n                heatmapper \".pvtVal\", \"red\"\n            when \"rowheatmap\"\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\n            when \"colheatmap\"\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\n        heatmapper \".pvtTotal.colTotal\", \"red\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var applyStyleToRange, callWithJQuery, dataTableToXlsx, writeXlsxFile,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  applyStyleToRange = function(xlsx, ws, range, style) {\n    var C, R, cell, cell_address, cell_ref, l, ref, ref1, results;\n    results = [];\n    for (R = l = ref = range.s.r, ref1 = range.e.r; ref <= ref1 ? l <= ref1 : l >= ref1; R = ref <= ref1 ? ++l : --l) {\n      results.push((function() {\n        var n, ref2, ref3, results1;\n        results1 = [];\n        for (C = n = ref2 = range.s.c, ref3 = range.e.c; ref2 <= ref3 ? n <= ref3 : n >= ref3; C = ref2 <= ref3 ? ++n : --n) {\n          cell_address = {\n            c: C,\n            r: R\n          };\n          cell_ref = xlsx.utils.encode_cell(cell_address);\n          cell = ws[cell_ref];\n          if (cell) {\n            cell.s = cell.s ? jQuery.extend(true, jQuery.extend(true, {}, cell.s), style) : style;\n            if (cell.t === 'z') {\n              results1.push(cell.t = 's');\n            } else {\n              results1.push(void 0);\n            }\n          } else {\n            results1.push(ws[cell_ref] = {\n              s: style,\n              v: '',\n              t: 's'\n            });\n          }\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  dataTableToXlsx = function(xlsx, table, pivotData, opts) {\n    var colAttrs, colKeys, cols, headerColsLen, headerRowsLen, k, l, len1, len2, m, n, rowAttrs, rowKeys, style2, style_body, style_total_col, style_total_row, t, ws;\n    ws = xlsx.utils.table_to_sheet(table, {\n      cellStyles: true\n    });\n    colAttrs = pivotData.colAttrs;\n    rowAttrs = pivotData.rowAttrs;\n    rowKeys = pivotData.getRowKeys();\n    colKeys = pivotData.getColKeys();\n    style2 = {\n      fill: {\n        type: 'pattern',\n        pattern: \"solid\",\n        fgColor: {\n          rgb: \"dddddd\"\n        }\n      },\n      font: {\n        sz: 11\n      },\n      alignment: {\n        wrapText: true\n      }\n    };\n    style_body = {\n      fill: {\n        type: 'pattern',\n        pattern: \"solid\",\n        fgColor: {\n          rgb: \"ffffff\"\n        }\n      },\n      font: {\n        sz: 11\n      }\n    };\n    style_total_row = {\n      border: {\n        top: {\n          style: 'thin',\n          color: '000000'\n        },\n        bottom: {\n          style: 'thin',\n          color: '000000'\n        }\n      },\n      font: {\n        sz: 11,\n        bold: true\n      }\n    };\n    style_total_col = {\n      border: {\n        left: {\n          style: 'thin',\n          color: '000000'\n        },\n        right: {\n          style: 'thin',\n          color: '000000'\n        }\n      },\n      font: {\n        sz: 11,\n        bold: true\n      }\n    };\n    headerRowsLen = colAttrs.length + (rowAttrs.length > 0 ? 1 : 0);\n    headerColsLen = rowAttrs.length + (colAttrs.length > 0 ? 1 : 0);\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: colAttrs.length,\n        c: headerColsLen + colKeys.length\n      }\n    }, style2);\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: 0,\n        c: headerColsLen + colKeys.length\n      }\n    }, {\n      border: {\n        top: {\n          style: 'thin',\n          color: '000000'\n        }\n      }\n    });\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: colAttrs.length,\n        c: 0\n      },\n      e: {\n        r: colAttrs.length,\n        c: headerColsLen + colKeys.length\n      }\n    }, {\n      border: {\n        bottom: {\n          style: 'thin',\n          color: '000000'\n        }\n      }\n    });\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: rowAttrs.length\n      }\n    }, style2);\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: 0\n      }\n    }, {\n      border: {\n        left: {\n          style: 'thin',\n          color: '000000'\n        }\n      }\n    });\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: rowAttrs.length\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: rowAttrs.length\n      }\n    }, {\n      border: {\n        right: {\n          style: 'thin',\n          color: '000000'\n        }\n      }\n    });\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: 0\n      },\n      e: {\n        r: colAttrs.length,\n        c: rowAttrs.length\n      }\n    }, {\n      font: {\n        sz: 11,\n        bold: true\n      }\n    });\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: colAttrs.length + 1,\n        c: rowAttrs.length + 1\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: headerColsLen + colKeys.length\n      }\n    }, style_body);\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: headerRowsLen + rowKeys.length,\n        c: 0\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: headerColsLen + colKeys.length\n      }\n    }, style_total_row);\n    applyStyleToRange(xlsx, ws, {\n      s: {\n        r: 0,\n        c: headerColsLen + colKeys.length\n      },\n      e: {\n        r: headerRowsLen + rowKeys.length,\n        c: headerColsLen + colKeys.length\n      }\n    }, style_total_col);\n    cols = [];\n    for (l = 0, len1 = rowAttrs.length; l < len1; l++) {\n      k = rowAttrs[l];\n      t = $.pivotUtilities.getTranslation(k, opts.dataTrans);\n      cols.push({\n        wch: t.length\n      });\n    }\n    m = 0;\n    for (n = 0, len2 = colAttrs.length; n < len2; n++) {\n      k = colAttrs[n];\n      t = $.pivotUtilities.getTranslation(k, opts.dataTrans);\n      m = Math.max(m, t.length);\n    }\n    if (colAttrs.length > 0) {\n      cols.push({\n        wch: m\n      });\n    }\n    ws['!cols'] = cols;\n    return ws;\n  };\n\n  writeXlsxFile = function(xlsx, table, pivotData, opts) {\n    var wb, ws;\n    wb = xlsx.utils.book_new();\n    ws = dataTableToXlsx(xlsx, table, pivotData, opts);\n    xlsx.utils.book_append_sheet(wb, ws, 'Sheet1');\n    return xlsx.writeFile(wb, 'pivot.xlsx', {\n      cellStyles: true\n    });\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, _getValueTranslation, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, getTranslation, getValueTranslation, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, pivotTableRendererXlsx, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(pvtData, opts) {\n        return pivotTableRendererXlsx(pvtData, opts);\n      },\n      \"Table Barchart\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).barchart();\n      },\n      \"Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap();\n      },\n      \"Row Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\");\n      },\n      \"Col Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\",\n          and: \"and\",\n          b_true: \"TRUE\",\n          b_false: \"FALSE\",\n          no_data: \"No data\"\n        },\n        rendererTrans: {\n          \"Table\": \"Table\",\n          \"Table Barchart\": \"Table Barchart\",\n          \"Heatmap\": \"Heatmap\",\n          \"Row Heatmap\": \"Row Heatmap\",\n          \"Col Heatmap\": \"Col Heatmap\"\n        },\n        aggregatorTrans: {\n          \"Count\": \"Count\",\n          \"Count Unique Values\": \"Count Unique Values\",\n          \"List Unique Values\": \"List Unique Values\",\n          \"Sum\": \"Sum\",\n          \"Integer Sum\": \"Integer Sum\",\n          \"Average\": \"Average\",\n          \"Minimum\": \"Minimum\",\n          \"Maximum\": \"Maximum\",\n          \"Sum over Sum\": \"Sum over Sum\",\n          \"80% Upper Bound\": \"80% Upper Bound\",\n          \"80% Lower Bound\": \"80% Lower Bound\",\n          \"Sum as Fraction of Total\": \"Sum as Fraction of Total\",\n          \"Sum as Fraction of Rows\": \"Sum as Fraction of Rows\",\n          \"Sum as Fraction of Columns\": \"Sum as Fraction of Columns\",\n          \"Count as Fraction of Total\": \"Count as Fraction of Total\",\n          \"Count as Fraction of Rows\": \"Count as Fraction of Rows\",\n          \"Count as Fraction of Columns\": \"Count as Fraction of Columns\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n    getTranslation = function(data, dataTrans) {\n      if (dataTrans == null) {\n        return data;\n      } else {\n        if ($.isArray(data)) {\n          return data.map(function(key) {\n            if (dataTrans[key]) {\n              return dataTrans[key];\n            } else {\n              return key;\n            }\n          });\n        } else if (dataTrans[data]) {\n          return dataTrans[data];\n        } else {\n          return data;\n        }\n      }\n    };\n    _getValueTranslation = function(k, dataTrans) {\n      var k_name;\n      if (dataTrans == null) {\n        return k;\n      }\n      if (k === true || k === 'true') {\n        k_name = dataTrans.b_true;\n      } else if (k === false || k === 'false') {\n        k_name = dataTrans.b_false;\n      } else if (k === '') {\n        k_name = dataTrans.no_data;\n      } else {\n        k_name = k;\n      }\n      return k_name;\n    };\n    getValueTranslation = function(data, dataTrans) {\n      if (dataTrans == null) {\n        return data;\n      } else {\n        if ($.isArray(data)) {\n          return data.map(function(key) {\n            return _getValueTranslation(key, dataTrans);\n          });\n        } else {\n          return _getValueTranslation(data, dataTrans);\n        }\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData,\n      getTranslation: getTranslation,\n      getValueTranslation: getValueTranslation\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, td, th, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = $.pivotUtilities.getTranslation(c, opts.dataTrans);\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = $.pivotUtilities.getValueTranslation(colKey[j], opts.localeStrings);\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        result.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = $.pivotUtilities.getTranslation(r, opts.dataTrans);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        result.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = $.pivotUtilities.getValueTranslation(txt, opts.localeStrings);\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        result.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      result.appendChild(tr);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n    pivotTableRendererXlsx = function(pivotData, opts) {\n      var defaults, result, tableHolder, xlsBtn;\n      result = pivotTableRenderer(pivotData, opts);\n      if (opts && opts.xlsx && pivotData.rowAttrs.length + pivotData.colAttrs.length > 0) {\n        defaults = {\n          localeStrings: {\n            exportXlsx: \"Export as XLSX\"\n          }\n        };\n        opts = $.extend(defaults, opts);\n        tableHolder = result;\n        xlsBtn = $(\"<a class=\\\"btn btn-sm btn-default\\\">\" + opts.localeStrings.exportXlsx + \"</a>\");\n        result = $(\"<div>\").append($(\"<div>\").append(xlsBtn).css('margin-bottom', '5px')).append(tableHolder);\n        xlsBtn.bind(\"click\", function() {\n          return writeXlsxFile(opts.xlsx, tableHolder, pivotData, opts);\n        });\n      }\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRendererXlsx,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new PivotData(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggrTrans, aggregator, attrLength, axisValues, c, colList, defaults, e, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, rendererTrans, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        lang: locale,\n        derivedAttributes: {},\n        aggregators: aggregators,\n        renderers: renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings,\n          lang: locale\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        if (opts.dataTrans != null) {\n          opts.rendererOptions.dataTrans = opts.dataTrans;\n          delete opts.dataTrans;\n        }\n        if (opts.xlsx != null) {\n          opts.rendererOptions.xlsx = opts.xlsx;\n          delete opts.xlsx;\n        }\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        rendererTrans = locales[locale].rendererTrans;\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(rendererTrans[x]).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, c_name, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          c_name = $.pivotUtilities.getTranslation(c, opts.rendererOptions.dataTrans);\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c_name + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text($.pivotUtilities.getValueTranslation(k, opts.localeStrings)));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c_name).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggrTrans = locales[locale].aggregatorTrans;\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(aggrTrans[x]));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, attr_name, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: []\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len5 = shownAttributes.length; u < len5; u++) {\n                  attr = shownAttributes[u];\n                  attr_name = $.pivotUtilities.getTranslation(attr, opts.rendererOptions.dataTrans);\n                  newDropdown.append($(\"<option>\").val(attr).text(attr_name));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope) {\n      var colorGen, heatmapper, i, j, l, n, numCols, numRows, ref, ref1;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorGen = function(color, min, max) {\n        var hexGen;\n        hexGen = (function() {\n          switch (color) {\n            case \"red\":\n              return function(hex) {\n                return \"ff\" + hex + hex;\n              };\n            case \"green\":\n              return function(hex) {\n                return hex + \"ff\" + hex;\n              };\n            case \"blue\":\n              return function(hex) {\n                return \"\" + hex + hex + \"ff\";\n              };\n          }\n        })();\n        return function(x) {\n          var hex, intensity;\n          intensity = 255 - Math.round(255 * (x - min) / (max - min));\n          hex = intensity.toString(16).split(\".\")[0];\n          if (hex.length === 1) {\n            hex = 0 + hex;\n          }\n          return hexGen(hex);\n        };\n      };\n      heatmapper = (function(_this) {\n        return function(scope, color) {\n          var colorFor, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorFor = colorGen(color, Math.min.apply(Math, values), Math.max.apply(Math, values));\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", \"#\" + colorFor(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\", \"red\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i, \"red\");\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref1 = numCols; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j, \"red\");\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\", \"red\");\n      heatmapper(\".pvtTotal.colTotal\", \"red\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}