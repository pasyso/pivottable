{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","_getValueTranslation","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","getTranslation","getValueTranslation","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","pvtData","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","and","b_true","b_false","no_data","rendererTrans","aggregatorTrans","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","dataTrans","isArray","map","key","k","k_name","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","len1","results","results1","tblCols","isEmptyObject","v","each","text","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","fromCharCode","agg","pivotUtilities","pivotData","c","r","spanSize","td","th","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","pivot","e","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","aggrTrans","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","lang","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","c_name","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","keys","showFilterList","triangleLink","updateFilter","valueList","hide","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","attr_name","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","s","subopts","t","unusedAttrsContainer","remove","not","excludedItems","ref7","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorGen","heatmapper","numCols","numRows","color","hexGen","hex","intensity","round","toString","colorFor","forEachCell","values","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (pvtData, opts) ->   pivotTableRenderer(pvtData, opts)\n        \"Table Barchart\": (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).barchart()\n        \"Heatmap\":        (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap()\n        \"Row Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\")\n        \"Col Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\")\n\n    locales = \n        en: \n#            aggregators: aggregators\n#            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n                and: \"and\" #for gchart renderer\n                b_true: \"TRUE\"\n                b_false: \"FALSE\"\n                no_data: \"No data\"\n            rendererTrans:\n                \"Table\":          \"Table\"\n                \"Table Barchart\": \"Table Barchart\"\n                \"Heatmap\":        \"Heatmap\"\n                \"Row Heatmap\":    \"Row Heatmap\"\n                \"Col Heatmap\":    \"Col Heatmap\"\n            aggregatorTrans:\n                \"Count\":                \"Count\"\n                \"Count Unique Values\":  \"Count Unique Values\"\n                \"List Unique Values\":   \"List Unique Values\"\n                \"Sum\":                  \"Sum\"\n                \"Integer Sum\":          \"Integer Sum\"\n                \"Average\":              \"Average\"\n                \"Minimum\":              \"Minimum\"\n                \"Maximum\":              \"Maximum\"\n                \"Sum over Sum\":         \"Sum over Sum\"\n                \"80% Upper Bound\":      \"80% Upper Bound\"\n                \"80% Lower Bound\":      \"80% Lower Bound\"\n                \"Sum as Fraction of Total\":     \"Sum as Fraction of Total\"\n                \"Sum as Fraction of Rows\":      \"Sum as Fraction of Rows\"\n                \"Sum as Fraction of Columns\":   \"Sum as Fraction of Columns\"\n                \"Count as Fraction of Total\":   \"Count as Fraction of Total\"\n                \"Count as Fraction of Rows\":    \"Count as Fraction of Rows\"\n                \"Count as Fraction of Columns\": \"Count as Fraction of Columns\"\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    getTranslation = (data, dataTrans) ->\n        if !dataTrans?\n            return data\n        else\n            return if $.isArray(data)\n                data.map (key)-> if dataTrans[key] then dataTrans[key] else key\n            else if dataTrans[data] then dataTrans[data] else data\n\n    _getValueTranslation = (k, dataTrans) ->\n        return k if !dataTrans?\n        if k==true || k=='true'\n            k_name = dataTrans.b_true\n        else if k==false || k=='false'\n            k_name = dataTrans.b_false\n        else if k==''\n            k_name = dataTrans.no_data\n        else\n            k_name = k\n        return k_name\n                \n    getValueTranslation = (data, dataTrans) ->\n        if !dataTrans?\n            return data\n        else\n            return if $.isArray(data) then data.map (key)-> _getValueTranslation(key, dataTrans) else _getValueTranslation(data, dataTrans)\n                                \n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n                \n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData, getTranslation, getValueTranslation}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            #th.textContent = c\n            th.textContent = $.pivotUtilities.getTranslation(c, opts.dataTrans)\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = $.pivotUtilities.getValueTranslation(colKey[j], opts.localeStrings)\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            result.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                #th.textContent = r\n                th.textContent = $.pivotUtilities.getTranslation(r, opts.dataTrans)\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            result.appendChild tr\n\n        #now the actual data rows, with their row headers and totals\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = $.pivotUtilities.getValueTranslation(txt, opts.localeStrings)\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            result.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        result.appendChild tr\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n        result = null\n        try\n            pivotData = new PivotData(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            lang: locale\n            derivedAttributes: {}\n            aggregators: aggregators\n            renderers: renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings, lang: locale\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n#            rendererTrans: locales[locale].rendererTrans\n#            aggregatorTrans: locales[locale].aggregatorTrans\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n        try\n            if opts.dataTrans?\n                opts.rendererOptions.dataTrans = opts.dataTrans\n                delete opts.dataTrans\n\n#            console.log('pivotUI',opts)\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n            rendererTrans = locales[locale].rendererTrans\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(rendererTrans[x]).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    #if own dataTrans of otps\n                    c_name = $.pivotUtilities.getTranslation(c, opts.rendererOptions.dataTrans)\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c_name} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n\n                             filterItem.append $(\"<span>\").text $.pivotUtilities.getValueTranslation(k,opts.localeStrings)\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c_name).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n            aggrTrans = locales[locale].aggregatorTrans\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(aggrTrans[x])\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            attr_name = $.pivotUtilities.getTranslation(attr, opts.rendererOptions.dataTrans)\n                            newDropdown.append($(\"<option>\").val(attr).text(attr_name))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\") ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        colorGen = (color, min, max) ->\n            hexGen = switch color\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\n\n            return (x) ->\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\n                hex = intensity.toString(16).split(\".\")[0]\n                hex = 0+hex if hex.length == 1\n                return hexGen(hex)\n\n        heatmapper = (scope, color) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\n\n        switch scope\n            when \"heatmap\"\n                heatmapper \".pvtVal\", \"red\"\n            when \"rowheatmap\"\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\n            when \"colheatmap\"\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\n        heatmapper \".pvtTotal.colTotal\", \"red\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, _getValueTranslation, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, getTranslation, getValueTranslation, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(pvtData, opts) {\n        return pivotTableRenderer(pvtData, opts);\n      },\n      \"Table Barchart\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).barchart();\n      },\n      \"Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap();\n      },\n      \"Row Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\");\n      },\n      \"Col Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\",\n          and: \"and\",\n          b_true: \"TRUE\",\n          b_false: \"FALSE\",\n          no_data: \"No data\"\n        },\n        rendererTrans: {\n          \"Table\": \"Table\",\n          \"Table Barchart\": \"Table Barchart\",\n          \"Heatmap\": \"Heatmap\",\n          \"Row Heatmap\": \"Row Heatmap\",\n          \"Col Heatmap\": \"Col Heatmap\"\n        },\n        aggregatorTrans: {\n          \"Count\": \"Count\",\n          \"Count Unique Values\": \"Count Unique Values\",\n          \"List Unique Values\": \"List Unique Values\",\n          \"Sum\": \"Sum\",\n          \"Integer Sum\": \"Integer Sum\",\n          \"Average\": \"Average\",\n          \"Minimum\": \"Minimum\",\n          \"Maximum\": \"Maximum\",\n          \"Sum over Sum\": \"Sum over Sum\",\n          \"80% Upper Bound\": \"80% Upper Bound\",\n          \"80% Lower Bound\": \"80% Lower Bound\",\n          \"Sum as Fraction of Total\": \"Sum as Fraction of Total\",\n          \"Sum as Fraction of Rows\": \"Sum as Fraction of Rows\",\n          \"Sum as Fraction of Columns\": \"Sum as Fraction of Columns\",\n          \"Count as Fraction of Total\": \"Count as Fraction of Total\",\n          \"Count as Fraction of Rows\": \"Count as Fraction of Rows\",\n          \"Count as Fraction of Columns\": \"Count as Fraction of Columns\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n    getTranslation = function(data, dataTrans) {\n      if (dataTrans == null) {\n        return data;\n      } else {\n        if ($.isArray(data)) {\n          return data.map(function(key) {\n            if (dataTrans[key]) {\n              return dataTrans[key];\n            } else {\n              return key;\n            }\n          });\n        } else if (dataTrans[data]) {\n          return dataTrans[data];\n        } else {\n          return data;\n        }\n      }\n    };\n    _getValueTranslation = function(k, dataTrans) {\n      var k_name;\n      if (dataTrans == null) {\n        return k;\n      }\n      if (k === true || k === 'true') {\n        k_name = dataTrans.b_true;\n      } else if (k === false || k === 'false') {\n        k_name = dataTrans.b_false;\n      } else if (k === '') {\n        k_name = dataTrans.no_data;\n      } else {\n        k_name = k;\n      }\n      return k_name;\n    };\n    getValueTranslation = function(data, dataTrans) {\n      if (dataTrans == null) {\n        return data;\n      } else {\n        if ($.isArray(data)) {\n          return data.map(function(key) {\n            return _getValueTranslation(key, dataTrans);\n          });\n        } else {\n          return _getValueTranslation(data, dataTrans);\n        }\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData,\n      getTranslation: getTranslation,\n      getValueTranslation: getValueTranslation\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, td, th, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = $.pivotUtilities.getTranslation(c, opts.dataTrans);\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = $.pivotUtilities.getValueTranslation(colKey[j], opts.localeStrings);\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        result.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = $.pivotUtilities.getTranslation(r, opts.dataTrans);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        result.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = $.pivotUtilities.getValueTranslation(txt, opts.localeStrings);\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        result.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      result.appendChild(tr);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new PivotData(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggrTrans, aggregator, attrLength, axisValues, c, colList, defaults, e, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, rendererTrans, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        lang: locale,\n        derivedAttributes: {},\n        aggregators: aggregators,\n        renderers: renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings,\n          lang: locale\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        if (opts.dataTrans != null) {\n          opts.rendererOptions.dataTrans = opts.dataTrans;\n          delete opts.dataTrans;\n        }\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        rendererTrans = locales[locale].rendererTrans;\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(rendererTrans[x]).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, c_name, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          c_name = $.pivotUtilities.getTranslation(c, opts.rendererOptions.dataTrans);\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c_name + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text($.pivotUtilities.getValueTranslation(k, opts.localeStrings)));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c_name).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggrTrans = locales[locale].aggregatorTrans;\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(aggrTrans[x]));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, attr_name, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: []\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (t = 0, len5 = shownAttributes.length; t < len5; t++) {\n                  attr = shownAttributes[t];\n                  attr_name = $.pivotUtilities.getTranslation(attr, opts.rendererOptions.dataTrans);\n                  newDropdown.append($(\"<option>\").val(attr).text(attr_name));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope) {\n      var colorGen, heatmapper, i, j, l, n, numCols, numRows, ref, ref1;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorGen = function(color, min, max) {\n        var hexGen;\n        hexGen = (function() {\n          switch (color) {\n            case \"red\":\n              return function(hex) {\n                return \"ff\" + hex + hex;\n              };\n            case \"green\":\n              return function(hex) {\n                return hex + \"ff\" + hex;\n              };\n            case \"blue\":\n              return function(hex) {\n                return \"\" + hex + hex + \"ff\";\n              };\n          }\n        })();\n        return function(x) {\n          var hex, intensity;\n          intensity = 255 - Math.round(255 * (x - min) / (max - min));\n          hex = intensity.toString(16).split(\".\")[0];\n          if (hex.length === 1) {\n            hex = 0 + hex;\n          }\n          return hexGen(hex);\n        };\n      };\n      heatmapper = (function(_this) {\n        return function(scope, color) {\n          var colorFor, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorFor = colorGen(color, Math.min.apply(Math, values), Math.max.apply(Math, values));\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", \"#\" + colorFor(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\", \"red\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i, \"red\");\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref1 = numCols; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j, \"red\");\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\", \"red\");\n      heatmapper(\".pvtTotal.colTotal\", \"red\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}